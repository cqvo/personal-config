name: Build Multiple Containers

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight every day
  workflow_dispatch:
    inputs:
      container:
        description: 'Specific container to build (leave empty for all)'
        required: false
        type: string

jobs:
  determine-containers:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set matrix
        id: set-matrix
        run: |
          if [ -n "${{ github.event.inputs.container }}" ]; then
            # If manually triggered with a specific container
            echo "matrix={\"container\":[\"${{ github.event.inputs.container }}\"]}" >> $GITHUB_OUTPUT
          else
            # Build all containers
            CONTAINERS=$(ls -d containers/* | xargs -n 1 basename | jq -R -s -c 'split("\n")[:-1]')
            echo "matrix={\"container\":$CONTAINERS}" >> $GITHUB_OUTPUT
          fi
  
  build-containers:
    needs: determine-containers
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix: ${{ fromJson(needs.determine-containers.outputs.matrix) }}
    
    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v3
      
      # Read container configuration
      - name: Read container config
        id: config
        run: |
          CONFIG_FILE="containers/${{ matrix.container }}/config.json"
          if [ -f "$CONFIG_FILE" ]; then
            REPO=$(jq -r '.repository' "$CONFIG_FILE")
            OWNER=$(jq -r '.owner' "$CONFIG_FILE")
            echo "repo=$REPO" >> $GITHUB_OUTPUT
            echo "owner=$OWNER" >> $GITHUB_OUTPUT
          else
            echo "::error::Missing config file for ${{ matrix.container }}"
            exit 1
          fi
      
      # Checkout the original repository
      - name: Checkout original repository
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.config.outputs.owner }}/${{ steps.config.outputs.repo }}
          path: source-repo
      
      # Cache node modules
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.container }}-${{ hashFiles('source-repo/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.container }}-
      
      # Copy Dockerfile to the source repository
      - name: Copy Dockerfile
        run: |
          cp containers/${{ matrix.container }}/Dockerfile source-repo/
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: source-repo
          push: true
          tags: |
            ghcr.io/cqvo/${{ matrix.container }}:latest
            ghcr.io/cqvo/${{ matrix.container }}:${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=https://github.com/${{ steps.config.outputs.owner }}/${{ steps.config.outputs.repo }}
            org.opencontainers.image.description=Container for ${{ matrix.container }}
